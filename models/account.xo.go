// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/knq/xoutil"
)

// Account represents a row from 'accounts'.
type Account struct {
	ID        int           `json:"id"`         // id
	Name      string        `json:"name"`       // name
	CreatedAt xoutil.SqTime `json:"created_at"` // created_at
	UpdatedAt xoutil.SqTime `json:"updated_at"` // updated_at
	CreatedBy string        `json:"created_by"` // created_by

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Account exists in the database.
func (a *Account) Exists() bool {
	return a._exists
}

// Deleted provides information if the Account has been deleted from the database.
func (a *Account) Deleted() bool {
	return a._deleted
}

// Insert inserts the Account to the database.
func (a *Account) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO accounts (` +
		`name, created_at, updated_at, created_by` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, a.Name, a.CreatedAt, a.UpdatedAt, a.CreatedBy)
	res, err := db.Exec(sqlstr, a.Name, a.CreatedAt, a.UpdatedAt, a.CreatedBy)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	a.ID = int(id)
	a._exists = true

	return nil
}

// Update updates the Account in the database.
func (a *Account) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE accounts SET ` +
		`name = ?, created_at = ?, updated_at = ?, created_by = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, a.Name, a.CreatedAt, a.UpdatedAt, a.CreatedBy, a.ID)
	_, err = db.Exec(sqlstr, a.Name, a.CreatedAt, a.UpdatedAt, a.CreatedBy, a.ID)
	return err
}

// Save saves the Account to the database.
func (a *Account) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Delete deletes the Account from the database.
func (a *Account) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM accounts WHERE id = ?`

	// run query
	XOLog(sqlstr, a.ID)
	_, err = db.Exec(sqlstr, a.ID)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// AccountByID retrieves a row from 'accounts' as a Account.
//
// Generated from index 'accounts_id_pkey'.
func AccountByID(db XODB, id int) (*Account, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, created_at, updated_at, created_by ` +
		`FROM accounts ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	a := Account{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&a.ID, &a.Name, &a.CreatedAt, &a.UpdatedAt, &a.CreatedBy)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
