// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/knq/xoutil"
)

// Bottle represents a row from 'bottles'.
type Bottle struct {
	ID        int            `json:"id"`         // id
	AccountID int            `json:"account_id"` // account_id
	Rating    int            `json:"rating"`     // rating
	Name      string         `json:"name"`       // name
	Vineyard  string         `json:"vineyard"`   // vineyard
	Varietal  string         `json:"varietal"`   // varietal
	Vintage   int            `json:"vintage"`    // vintage
	Color     string         `json:"color"`      // color
	Sweetness sql.NullInt64  `json:"sweetness"`  // sweetness
	Country   sql.NullString `json:"country"`    // country
	Region    sql.NullString `json:"region"`     // region
	Review    sql.NullString `json:"review"`     // review
	CreatedAt xoutil.SqTime  `json:"created_at"` // created_at
	UpdatedAt xoutil.SqTime  `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Bottle exists in the database.
func (b *Bottle) Exists() bool {
	return b._exists
}

// Deleted provides information if the Bottle has been deleted from the database.
func (b *Bottle) Deleted() bool {
	return b._deleted
}

// Insert inserts the Bottle to the database.
func (b *Bottle) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO bottles (` +
		`account_id, rating, name, vineyard, varietal, vintage, color, sweetness, country, region, review, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, b.AccountID, b.Rating, b.Name, b.Vineyard, b.Varietal, b.Vintage, b.Color, b.Sweetness, b.Country, b.Region, b.Review, b.CreatedAt, b.UpdatedAt)
	res, err := db.Exec(sqlstr, b.AccountID, b.Rating, b.Name, b.Vineyard, b.Varietal, b.Vintage, b.Color, b.Sweetness, b.Country, b.Region, b.Review, b.CreatedAt, b.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	b.ID = int(id)
	b._exists = true

	return nil
}

// Update updates the Bottle in the database.
func (b *Bottle) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if b._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE bottles SET ` +
		`account_id = ?, rating = ?, name = ?, vineyard = ?, varietal = ?, vintage = ?, color = ?, sweetness = ?, country = ?, region = ?, review = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, b.AccountID, b.Rating, b.Name, b.Vineyard, b.Varietal, b.Vintage, b.Color, b.Sweetness, b.Country, b.Region, b.Review, b.CreatedAt, b.UpdatedAt, b.ID)
	_, err = db.Exec(sqlstr, b.AccountID, b.Rating, b.Name, b.Vineyard, b.Varietal, b.Vintage, b.Color, b.Sweetness, b.Country, b.Region, b.Review, b.CreatedAt, b.UpdatedAt, b.ID)
	return err
}

// Save saves the Bottle to the database.
func (b *Bottle) Save(db XODB) error {
	if b.Exists() {
		return b.Update(db)
	}

	return b.Insert(db)
}

// Delete deletes the Bottle from the database.
func (b *Bottle) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return nil
	}

	// if deleted, bail
	if b._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM bottles WHERE id = ?`

	// run query
	XOLog(sqlstr, b.ID)
	_, err = db.Exec(sqlstr, b.ID)
	if err != nil {
		return err
	}

	// set deleted
	b._deleted = true

	return nil
}

// Account returns the Account associated with the Bottle's AccountID (account_id).
//
// Generated from foreign key 'bottles_account_id_fkey'.
func (b *Bottle) Account(db XODB) (*Account, error) {
	return AccountByID(db, b.AccountID)
}

// BottlesByAccountID retrieves a row from 'bottles' as a Bottle.
//
// Generated from index 'bottles_account_id'.
func BottlesByAccountID(db XODB, accountID int) ([]*Bottle, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, account_id, rating, name, vineyard, varietal, vintage, color, sweetness, country, region, review, created_at, updated_at ` +
		`FROM bottles ` +
		`WHERE account_id = ?`

	// run query
	XOLog(sqlstr, accountID)
	q, err := db.Query(sqlstr, accountID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Bottle{}
	for q.Next() {
		b := Bottle{
			_exists: true,
		}

		// scan
		err = q.Scan(&b.ID, &b.AccountID, &b.Rating, &b.Name, &b.Vineyard, &b.Varietal, &b.Vintage, &b.Color, &b.Sweetness, &b.Country, &b.Region, &b.Review, &b.CreatedAt, &b.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &b)
	}

	return res, nil
}

// BottleByID retrieves a row from 'bottles' as a Bottle.
//
// Generated from index 'bottles_id_pkey'.
func BottleByID(db XODB, id int) (*Bottle, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, account_id, rating, name, vineyard, varietal, vintage, color, sweetness, country, region, review, created_at, updated_at ` +
		`FROM bottles ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	b := Bottle{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&b.ID, &b.AccountID, &b.Rating, &b.Name, &b.Vineyard, &b.Varietal, &b.Vintage, &b.Color, &b.Sweetness, &b.Country, &b.Region, &b.Review, &b.CreatedAt, &b.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &b, nil
}
